From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hamza El-Saawy <hamzaelsaawy@microsoft.com>
Date: Mon, 28 Mar 2022 15:19:24 -0400
Subject: [PATCH] Added retry to bundle deletion

Added retries after waits to allow shim process to fully close and free
lock on bundle directory.

Signed-off-by: Hamza El-Saawy <hamzaelsaawy@microsoft.com>
---
 runtime/v2/bundle.go         | 13 --------
 runtime/v2/bundle_unix.go    | 39 ++++++++++++++++++++++++
 runtime/v2/bundle_windows.go | 59 ++++++++++++++++++++++++++++++++++++
 3 files changed, 98 insertions(+), 13 deletions(-)
 create mode 100644 runtime/v2/bundle_unix.go
 create mode 100644 runtime/v2/bundle_windows.go

diff --git a/runtime/v2/bundle.go b/runtime/v2/bundle.go
index ae94ad704..452e151a9 100644
--- a/runtime/v2/bundle.go
+++ b/runtime/v2/bundle.go
@@ -160,16 +160,3 @@ func (b *Bundle) Delete(ctx context.Context) error {
 	}
 	return fmt.Errorf("failed to remove both bundle and workdir locations: %v: %w", err2, err)
 }
-
-// atomicDelete renames the path to a hidden file before removal
-func atomicDelete(path string) error {
-	// create a hidden dir for an atomic removal
-	atomicPath := filepath.Join(filepath.Dir(path), fmt.Sprintf(".%s", filepath.Base(path)))
-	if err := os.Rename(path, atomicPath); err != nil {
-		if os.IsNotExist(err) {
-			return nil
-		}
-		return err
-	}
-	return os.RemoveAll(atomicPath)
-}
diff --git a/runtime/v2/bundle_unix.go b/runtime/v2/bundle_unix.go
new file mode 100644
index 000000000..56b325f81
--- /dev/null
+++ b/runtime/v2/bundle_unix.go
@@ -0,0 +1,39 @@
+//go:build !windows
+// +build !windows
+
+/*
+   Copyright The containerd Authors.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+package v2
+
+import (
+	"fmt"
+	"os"
+	"path/filepath"
+)
+
+// atomicDelete renames the path to a hidden file before removal
+func atomicDelete(path string) error {
+	// create a hidden dir for an atomic removal
+	atomicPath := filepath.Join(filepath.Dir(path), fmt.Sprintf(".%s", filepath.Base(path)))
+	if err := os.Rename(path, atomicPath); err != nil {
+		if os.IsNotExist(err) {
+			return nil
+		}
+		return err
+	}
+	return os.RemoveAll(atomicPath)
+}
diff --git a/runtime/v2/bundle_windows.go b/runtime/v2/bundle_windows.go
new file mode 100644
index 000000000..3b800d2ab
--- /dev/null
+++ b/runtime/v2/bundle_windows.go
@@ -0,0 +1,59 @@
+//go:build windows
+// +build windows
+
+/*
+   Copyright The containerd Authors.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+package v2
+
+import (
+	"errors"
+	"fmt"
+	"os"
+	"path/filepath"
+	"time"
+
+	"github.com/sirupsen/logrus"
+	"golang.org/x/sys/windows"
+)
+
+const nRetries = 3
+const retryWait = 100 * time.Millisecond
+
+// atomicDelete renames the path to a hidden file before removal
+func atomicDelete(path string) error {
+	// create a hidden dir for an atomic removal
+	atomicPath := filepath.Join(filepath.Dir(path), fmt.Sprintf(".%s", filepath.Base(path)))
+	// Windows places a lock on a process's working directory, so, unlike Linux, you cannot delete
+	// if the process is still running.
+	// Add retries with wait to allow the shim to fully exit.
+	var err error
+	for i := 1; i <= nRetries; i++ {
+		if err = os.Rename(path, atomicPath); err != nil {
+			logrus.Debugf("bundle %q atomic delete attempt #%d failed: %v", path, i, err)
+			if os.IsNotExist(err) {
+				return nil
+			}
+			if i != nRetries && errors.Is(err, windows.ERROR_SHARING_VIOLATION) {
+				time.Sleep(retryWait)
+				continue
+			}
+			return err
+		}
+		break
+	}
+	return os.RemoveAll(atomicPath)
+}
