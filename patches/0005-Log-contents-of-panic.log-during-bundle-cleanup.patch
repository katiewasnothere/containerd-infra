From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Amit Barve <ambarve@microsoft.com>
Date: Mon, 17 May 2021 23:06:44 -0700
Subject: [PATCH] Log contents of panic.log during bundle cleanup

We already have code in hcsshim that logs the contents of the panic.log file during shim
delete command. However, that doesn't handle all of the cases. This change should fix
that.

Signed-off-by: Amit Barve <ambarve@microsoft.com>
(cherry picked from commit 39ad7f3ec0e47d3bc22937f92d79a2f70053f65e)
---
 pkg/ioutil/ioutil.go    | 45 +++++++++++++++++++++++++++++++++++++++++
 runtime/v2/binary.go    |  2 +-
 runtime/v2/bundle.go    | 22 ++++++++++++++++++--
 runtime/v2/manager.go   |  3 ++-
 runtime/v2/shim.go      |  2 +-
 runtime/v2/shim_load.go |  8 ++++----
 6 files changed, 73 insertions(+), 9 deletions(-)
 create mode 100644 pkg/ioutil/ioutil.go

diff --git a/pkg/ioutil/ioutil.go b/pkg/ioutil/ioutil.go
new file mode 100644
index 000000000..070b2361e
--- /dev/null
+++ b/pkg/ioutil/ioutil.go
@@ -0,0 +1,45 @@
+/*
+   Copyright The containerd Authors.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+*/
+
+package ioutil
+
+import (
+	"os"
+
+	"github.com/pkg/errors"
+)
+
+// LimitedRead reads at max `readLimitBytes` bytes from the file at path `filePath`. If the file has
+// more than `readLimitBytes` bytes of data then first `readLimitBytes` will be returned.
+func LimitedRead(filePath string, readLimitBytes int64) ([]byte, error) {
+	f, err := os.Open(filePath)
+	if err != nil {
+		return nil, errors.Wrap(err, "limited read failed to open file")
+	}
+	defer f.Close()
+	if fi, err := f.Stat(); err == nil {
+		if fi.Size() < readLimitBytes {
+			readLimitBytes = fi.Size()
+		}
+		buf := make([]byte, readLimitBytes)
+		_, err := f.Read(buf)
+		if err != nil {
+			return []byte{}, errors.Wrap(err, "limited read failed during file read")
+		}
+		return buf, nil
+	}
+	return []byte{}, errors.Wrap(err, "limited read failed during file stat")
+}
diff --git a/runtime/v2/binary.go b/runtime/v2/binary.go
index 1a8774956..9a65513aa 100644
--- a/runtime/v2/binary.go
+++ b/runtime/v2/binary.go
@@ -188,7 +188,7 @@ func (b *binary) Delete(ctx context.Context) (*runtime.Exit, error) {
 	if err := response.Unmarshal(out.Bytes()); err != nil {
 		return nil, err
 	}
-	if err := b.bundle.Delete(); err != nil {
+	if err := b.bundle.Delete(ctx); err != nil {
 		return nil, err
 	}
 	return &runtime.Exit{
diff --git a/runtime/v2/bundle.go b/runtime/v2/bundle.go
index 8152a5277..ae94ad704 100644
--- a/runtime/v2/bundle.go
+++ b/runtime/v2/bundle.go
@@ -23,8 +23,10 @@ import (
 	"path/filepath"
 
 	"github.com/containerd/containerd/identifiers"
+	"github.com/containerd/containerd/log"
 	"github.com/containerd/containerd/mount"
 	"github.com/containerd/containerd/namespaces"
+	cioutil "github.com/containerd/containerd/pkg/ioutil"
 )
 
 const configFilename = "config.json"
@@ -116,16 +118,32 @@ type Bundle struct {
 }
 
 // Delete a bundle atomically
-func (b *Bundle) Delete() error {
+func (b *Bundle) Delete(ctx context.Context) error {
 	work, werr := os.Readlink(filepath.Join(b.Path, "work"))
 	rootfs := filepath.Join(b.Path, "rootfs")
+
+	// on windows hcsshim writes panic logs in the bundle directory in a file named
+	// "panic.log" log those messages (if any).
+	// Read only upto 1MB worth of data from this file. If the file is larger
+	// than that, log that.
+	readLimit := int64(1024 * 1024) // 1MB
+	logBytes, err := cioutil.LimitedRead(filepath.Join(b.Path, "panic.log"), readLimit)
+	if err == nil && len(logBytes) > 0 {
+		if int64(len(logBytes)) == readLimit {
+			log.G(ctx).Warnf("shim panic log file %s is larger than 1MB, logging only first 1MB", filepath.Join(b.Path, "panic.log"))
+		}
+		log.G(ctx).WithField("log", string(logBytes)).Warn("found shim panic logs during delete")
+	} else if err != nil && !os.IsNotExist(err) {
+		log.G(ctx).WithError(err).Warn("failed to open shim panic log")
+	}
+
 	if err := mount.UnmountAll(rootfs, 0); err != nil {
 		return fmt.Errorf("unmount rootfs %s: %w", rootfs, err)
 	}
 	if err := os.Remove(rootfs); err != nil && !os.IsNotExist(err) {
 		return fmt.Errorf("failed to remove bundle rootfs: %w", err)
 	}
-	err := atomicDelete(b.Path)
+	err = atomicDelete(b.Path)
 	if err == nil {
 		if werr == nil {
 			return atomicDelete(work)
diff --git a/runtime/v2/manager.go b/runtime/v2/manager.go
index d8e2cb5fe..eb17662ba 100644
--- a/runtime/v2/manager.go
+++ b/runtime/v2/manager.go
@@ -164,7 +164,7 @@ func (m *ShimManager) Start(ctx context.Context, id string, opts runtime.CreateO
 	}
 	defer func() {
 		if retErr != nil {
-			bundle.Delete()
+			bundle.Delete(ctx)
 		}
 	}()
 
@@ -175,6 +175,7 @@ func (m *ShimManager) Start(ctx context.Context, id string, opts runtime.CreateO
 	defer func() {
 		if retErr != nil {
 			m.cleanupShim(shim)
+			bundle.Delete(ctx)
 		}
 	}()
 
diff --git a/runtime/v2/shim.go b/runtime/v2/shim.go
index 2bffe116a..ad2b5d20c 100644
--- a/runtime/v2/shim.go
+++ b/runtime/v2/shim.go
@@ -227,7 +227,7 @@ func (s *shim) delete(ctx context.Context) error {
 		result = multierror.Append(result, fmt.Errorf("close wait error: %w", err))
 	}
 
-	if err := s.bundle.Delete(); err != nil {
+	if err := s.bundle.Delete(ctx); err != nil {
 		log.G(ctx).WithField("id", s.ID()).WithError(err).Error("failed to delete bundle")
 		result = multierror.Append(result, fmt.Errorf("failed to delete bundle: %w", err))
 	}
diff --git a/runtime/v2/shim_load.go b/runtime/v2/shim_load.go
index afd2dfb4f..2252ed8a2 100644
--- a/runtime/v2/shim_load.go
+++ b/runtime/v2/shim_load.go
@@ -80,12 +80,12 @@ func (m *ShimManager) loadShims(ctx context.Context) error {
 		// fast path
 		bf, err := os.ReadDir(bundle.Path)
 		if err != nil {
-			bundle.Delete()
+			bundle.Delete(ctx)
 			log.G(ctx).WithError(err).Errorf("fast path read bundle path for %s", bundle.Path)
 			continue
 		}
 		if len(bf) == 0 {
-			bundle.Delete()
+			bundle.Delete(ctx)
 			continue
 		}
 
@@ -108,7 +108,7 @@ func (m *ShimManager) loadShims(ctx context.Context) error {
 				if err := mount.UnmountAll(filepath.Join(bundle.Path, "rootfs"), 0); err != nil {
 					log.G(ctx).WithError(err).Errorf("failed to unmount of rootfs %s", id)
 				}
-				bundle.Delete()
+				bundle.Delete(ctx)
 				continue
 			}
 			runtime = container.Runtime.Name
@@ -116,7 +116,7 @@ func (m *ShimManager) loadShims(ctx context.Context) error {
 
 		runtime, err = m.resolveRuntimePath(runtime)
 		if err != nil {
-			bundle.Delete()
+			bundle.Delete(ctx)
 			log.G(ctx).WithError(err).Error("failed to resolve runtime path")
 			continue
 		}
